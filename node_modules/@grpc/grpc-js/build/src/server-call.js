"use strict";
/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const stream_1 = require("stream");
class ServerUnaryCall extends events_1.EventEmitter {
    constructor(call, metadata) {
        super();
        this.call = call;
        this.metadata = metadata;
        this.cancelled = false;
        this.request = null; // TODO(cjihrig): Read the unary request here.
    }
    getPeer() {
        throw new Error('not implemented yet');
    }
    sendMetadata(responseMetadata) {
        throw new Error('not implemented yet');
    }
}
exports.ServerUnaryCall = ServerUnaryCall;
class ServerReadableStream extends stream_1.Readable {
    constructor(call, metadata, deserialize) {
        super();
        this.call = call;
        this.metadata = metadata;
        this.deserialize = deserialize;
        this.cancelled = false;
    }
    getPeer() {
        throw new Error('not implemented yet');
    }
    sendMetadata(responseMetadata) {
        throw new Error('not implemented yet');
    }
}
exports.ServerReadableStream = ServerReadableStream;
class ServerWritableStream extends stream_1.Writable {
    constructor(call, metadata, serialize) {
        super();
        this.call = call;
        this.metadata = metadata;
        this.serialize = serialize;
        this.cancelled = false;
        this.request = null; // TODO(cjihrig): Read the unary request here.
    }
    getPeer() {
        throw new Error('not implemented yet');
    }
    sendMetadata(responseMetadata) {
        throw new Error('not implemented yet');
    }
}
exports.ServerWritableStream = ServerWritableStream;
class ServerDuplexStream extends stream_1.Duplex {
    constructor(call, metadata, serialize, deserialize) {
        super();
        this.call = call;
        this.metadata = metadata;
        this.serialize = serialize;
        this.deserialize = deserialize;
        this.cancelled = false;
    }
    getPeer() {
        throw new Error('not implemented yet');
    }
    sendMetadata(responseMetadata) {
        throw new Error('not implemented yet');
    }
}
exports.ServerDuplexStream = ServerDuplexStream;
// Internal class that wraps the HTTP2 request.
class ServerCall {
}
exports.ServerCall = ServerCall;
//# sourceMappingURL=server-call.js.map