/// <reference types="node" />
import { EventEmitter } from 'events';
import { Duplex, Readable, Writable } from 'stream';
import { ServiceError } from './call';
import { Deserialize, Serialize } from './make-client';
import { Metadata } from './metadata';
export declare class ServerUnaryCall<RequestType> extends EventEmitter {
    private call;
    metadata: Metadata;
    cancelled: boolean;
    request: RequestType | null;
    constructor(call: ServerCall, metadata: Metadata);
    getPeer(): string;
    sendMetadata(responseMetadata: Metadata): void;
}
export declare class ServerReadableStream<RequestType> extends Readable {
    private call;
    metadata: Metadata;
    private deserialize;
    cancelled: boolean;
    constructor(call: ServerCall, metadata: Metadata, deserialize: Deserialize<RequestType>);
    getPeer(): string;
    sendMetadata(responseMetadata: Metadata): void;
}
export declare class ServerWritableStream<RequestType, ResponseType> extends Writable {
    private call;
    metadata: Metadata;
    private serialize;
    cancelled: boolean;
    request: RequestType | null;
    constructor(call: ServerCall, metadata: Metadata, serialize: Serialize<ResponseType>);
    getPeer(): string;
    sendMetadata(responseMetadata: Metadata): void;
}
export declare class ServerDuplexStream<RequestType, ResponseType> extends Duplex {
    private call;
    metadata: Metadata;
    private serialize;
    private deserialize;
    cancelled: boolean;
    constructor(call: ServerCall, metadata: Metadata, serialize: Serialize<ResponseType>, deserialize: Deserialize<RequestType>);
    getPeer(): string;
    sendMetadata(responseMetadata: Metadata): void;
}
export declare class ServerCall {
}
export declare type sendUnaryData<ResponseType> = (error: ServiceError | null, value: ResponseType | null, trailer?: Metadata, flags?: number) => void;
export declare type handleUnaryCall<RequestType, ResponseType> = (call: ServerUnaryCall<RequestType>, callback: sendUnaryData<ResponseType>) => void;
export declare type handleClientStreamingCall<RequestType, ResponseType> = (call: ServerReadableStream<RequestType>, callback: sendUnaryData<ResponseType>) => void;
export declare type handleServerStreamingCall<RequestType, ResponseType> = (call: ServerWritableStream<RequestType, ResponseType>) => void;
export declare type handleBidiStreamingCall<RequestType, ResponseType> = (call: ServerDuplexStream<RequestType, ResponseType>) => void;
export declare type HandleCall<RequestType, ResponseType> = handleUnaryCall<RequestType, ResponseType> | handleClientStreamingCall<RequestType, ResponseType> | handleServerStreamingCall<RequestType, ResponseType> | handleBidiStreamingCall<RequestType, ResponseType>;
export declare type Handler<RequestType, ResponseType> = {
    func: HandleCall<RequestType, ResponseType>;
    serialize: Serialize<ResponseType>;
    deserialize: Deserialize<RequestType>;
    type: HandlerType;
};
export declare type HandlerType = 'bidi' | 'clientStream' | 'serverStream' | 'unary';
